generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String            @id @default(cuid()) @map("id")
  fullName           String            @map("fullName")
  email              String            @unique @map("email")
  phoneNumber        String?           @map("phoneNumber")
  passwordHash       String            @map("passwordHash")
  passwordSalt       String            @map("passwordSalt")
  role              String            @map("role")
  emailConfirmed     Boolean           @default(false) @map("emailConfirmed")
  confirmationToken  String?           @map("confirmationToken")
  resetPasswordToken String?           @map("resetPasswordToken")
  resetPasswordExpiry DateTime?        @map("resetPasswordExpiry")
  lastLoginDate      DateTime?         @map("lastLoginDate")
  createdAt          DateTime          @default(now()) @map("createdAt")
  updatedAt          DateTime          @updatedAt @map("updatedAt")
  loginHistory       UserLoginHistory[]
  conversations      Conversations[]
  createdProducts    Products[]        @relation("CreatedProducts")
  submittedBids      Bids[]           @relation("SubmittedBids")
  sessions          UserSessions[]

  @@map("Users")
}

model UserLoginHistory {
  id            String    @id @default(cuid()) @map("id")
  userId        String    @map("userId")
  loginDate     DateTime  @default(now()) @map("loginDate")
  ipAddress     String?   @map("ipAddress")
  userAgent     String?   @map("userAgent")
  successful    Boolean   @map("successful")
  failureReason String?   @map("failureReason")
  user          Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("UserLoginHistory")
}

model UserSessions {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("userId")
  token     String   @map("token")
  expiresAt DateTime @map("expiresAt")
  createdAt DateTime @default(now()) @map("createdAt")
  ipAddress String?  @map("ipAddress")
  userAgent String?  @map("userAgent")
  user      Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("UserSessions")
}

model Conversations {
  id        String    @id @default(cuid()) @map("id")
  userId    String?   @map("userId")
  userName  String?   @map("userName")
  userPhone String?   @map("userPhone")
  messages  Messages[]
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")
  user      Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Conversations")
}

model Messages {
  id             String       @id @default(cuid()) @map("id")
  conversationId String       @map("conversationId")
  content        String       @map("content")
  isUser         Boolean      @map("isUser")
  createdAt      DateTime     @default(now()) @map("createdAt")
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Messages")
}

model Products {
  id             String    @id @default(cuid()) @map("id")
  title          String    @map("title")
  description    String    @map("description")
  price          Float     @map("price")
  imageUrl       String?   @map("imageUrl")
  status         String    @map("status")
  creatorId      String    @map("creatorId")
  manufacturerId String?   @map("manufacturerId")
  createdAt      DateTime  @default(now()) @map("createdAt")
  updatedAt      DateTime  @updatedAt @map("updatedAt")
  bids           Bids[]
  creator        Users     @relation("CreatedProducts", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Products")
}

model Bids {
  id             String    @id @default(cuid()) @map("id")
  productId      String    @map("productId")
  upholstererId  String    @map("upholstererId")
  amount         Float     @map("amount")
  status         String    @map("status")
  notes          String?   @map("notes")
  createdAt      DateTime  @default(now()) @map("createdAt")
  updatedAt      DateTime  @updatedAt @map("updatedAt")
  product        Products  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  upholsterer    Users     @relation("SubmittedBids", fields: [upholstererId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Bids")
}
