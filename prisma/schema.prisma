// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String         @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  fullName            String         @map("FullName") @db.NVarChar(255)
  email               String         @unique @map("Email") @db.NVarChar(255)
  phoneNumber         String?        @map("PhoneNumber") @db.NVarChar(20)
  passwordHash        String         @map("PasswordHash") @db.NVarChar(255)
  passwordSalt        String         @map("PasswordSalt") @db.NVarChar(255)
  role               String         @default("client") @map("Role") @db.NVarChar(20)
  emailConfirmed     Boolean        @default(false) @map("EmailConfirmed")
  confirmationToken   String?        @map("ConfirmationToken") @db.UniqueIdentifier
  resetPasswordToken  String?        @map("ResetPasswordToken") @db.UniqueIdentifier
  resetPasswordExpiry DateTime?      @map("ResetPasswordExpiry")
  lastLoginDate      DateTime?      @map("LastLoginDate")
  createdAt          DateTime       @default(now()) @map("CreatedAt")
  updatedAt          DateTime       @default(now()) @map("UpdatedAt")
  products           Products[]     @relation("CreatedProducts")
  manufacturedProducts Products[]   @relation("ManufacturedProducts")
  bids               Bids[]
  conversations      Conversations[]
  sessions           UserSessions[]
  loginHistory       UserLoginHistory[]
}

model Products {
  id              String    @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  title           String    @map("Title") @db.NVarChar(255)
  description     String?   @map("Description") @db.NVarChar(Max)
  price           Decimal?  @map("Price") @db.Decimal(10, 2)
  imageUrl        String?   @map("ImageUrl") @db.NVarChar(500)
  status          String    @default("ai-generated") @map("Status") @db.NVarChar(50)
  creatorId       String    @map("CreatorId") @db.UniqueIdentifier
  manufacturerId  String?   @map("ManufacturerId") @db.UniqueIdentifier
  createdAt       DateTime  @default(now()) @map("CreatedAt")
  updatedAt       DateTime  @default(now()) @map("UpdatedAt")
  creator         Users     @relation("CreatedProducts", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturer    Users?    @relation("ManufacturedProducts", fields: [manufacturerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  bids            Bids[]
}

model Bids {
  id            String    @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  productId     String    @map("ProductId") @db.UniqueIdentifier
  upholstererId String    @map("UpholstererId") @db.UniqueIdentifier
  amount        Decimal   @map("Amount") @db.Decimal(10, 2)
  status        String    @default("pending") @map("Status") @db.NVarChar(50)
  notes         String?   @map("Notes") @db.NVarChar(Max)
  createdAt     DateTime  @default(now()) @map("CreatedAt")
  updatedAt     DateTime  @default(now()) @map("UpdatedAt")
  product       Products  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  upholsterer   Users     @relation(fields: [upholstererId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Conversations {
  id          String    @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  userId      String?   @map("UserId") @db.UniqueIdentifier
  userName    String?   @map("UserName") @db.NVarChar(255)
  userPhone   String?   @map("UserPhone") @db.NVarChar(20)
  createdAt   DateTime  @default(now()) @map("CreatedAt")
  updatedAt   DateTime  @default(now()) @map("UpdatedAt")
  user        Users?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  messages    Messages[]
}

model Messages {
  id             String       @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  conversationId String       @map("ConversationId") @db.UniqueIdentifier
  content        String       @map("Content") @db.NVarChar(Max)
  isUser         Boolean      @map("IsUser")
  createdAt      DateTime     @default(now()) @map("CreatedAt")
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserSessions {
  id         String    @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  userId     String    @map("UserId") @db.UniqueIdentifier
  token      String    @unique @map("Token") @db.NVarChar(255)
  expiresAt  DateTime  @map("ExpiresAt")
  createdAt  DateTime  @default(now()) @map("CreatedAt")
  ipAddress  String?   @map("IpAddress") @db.NVarChar(50)
  userAgent  String?   @map("UserAgent") @db.NVarChar(500)
  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserLoginHistory {
  id            String    @id @default(uuid()) @map("Id") @db.UniqueIdentifier
  userId        String    @map("UserId") @db.UniqueIdentifier
  loginDate     DateTime  @default(now()) @map("LoginDate")
  ipAddress     String?   @map("IpAddress") @db.NVarChar(50)
  userAgent     String?   @map("UserAgent") @db.NVarChar(500)
  successful    Boolean   @map("Successful")
  failureReason String?   @map("FailureReason") @db.NVarChar(255)
  user          Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
